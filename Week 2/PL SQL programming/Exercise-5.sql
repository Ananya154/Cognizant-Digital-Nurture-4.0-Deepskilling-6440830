-- STEP 1: Create AuditLog table
CREATE TABLE AuditLog (
    AuditID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AccountID NUMBER,
    TransactionDate DATE,
    Amount NUMBER,
    TransactionType VARCHAR2(10),
    LoggedAt DATE
);
/

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
   :NEW.LastModified := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
   INSERT INTO AuditLog (AccountID, TransactionDate, Amount, TransactionType, LoggedAt)
   VALUES (:NEW.AccountID, :NEW.TransactionDate, :NEW.Amount, :NEW.TransactionType, SYSDATE);
END;
/

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
   v_balance NUMBER;
BEGIN
   SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = :NEW.AccountID;

   IF :NEW.TransactionType = 'Withdrawal' THEN
      IF :NEW.Amount > v_balance THEN
         RAISE_APPLICATION_ERROR(-20001, 'Withdrawal amount exceeds current balance.');
      END IF;

   ELSIF :NEW.TransactionType = 'Deposit' THEN
      IF :NEW.Amount <= 0 THEN
         RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be greater than zero.');
      END IF;

   ELSE
      RAISE_APPLICATION_ERROR(-20003, 'Invalid transaction type.');
   END IF;
END;
/
BEGIN
    UPDATE Customers SET Balance = Balance + 100 WHERE CustomerID = 1;

    DBMS_OUTPUT.PUT_LINE('Customer balance updated.');

    FOR rec IN (SELECT Name, LastModified FROM Customers WHERE CustomerID = 1) LOOP
        DBMS_OUTPUT.PUT_LINE('LastModified for ' || rec.Name || ': ' || TO_CHAR(rec.LastModified, 'DD-Mon-YYYY HH24:MI:SS'));
    END LOOP;
END;
/
BEGIN
    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (4, 1, SYSDATE, 99999, 'Withdrawal');
    DBMS_OUTPUT.PUT_LINE('Should not see this if error triggered.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
BEGIN
    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (5, 1, SYSDATE, 0, 'Deposit');
    DBMS_OUTPUT.PUT_LINE('Should not see this if error triggered.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
BEGIN
    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (6, 1, SYSDATE, 200, 'Transfer');
    DBMS_OUTPUT.PUT_LINE('Should not see this if error triggered.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
